# Class for the Black King

class bKing:

    #Variables
    material = -1000 #Value of material
    value = -1000 #Fluid value of the piece
    char = 'k' #Char to represent piece

    #Constructor
    def __init__(self):
        pass

    #Piece-Square map multiplier (used in isolated evaluation of pieces)
    opening = {
        56: 0.15, 57: 0.35, 58: 0.25, 59: -0.25, 60: -0.05, 61: -0.15, 62: 0.35, 63: 0.20,
        48: 0.00, 49: 0.00, 50: -0.10, 51: -0.30, 52: -0.30, 53: -0.15, 54: -0.10, 55: 0.00,
        40: -0.25, 41: -0.30, 42: -0.35, 43: -0.45, 44: -0.45, 45: -0.35, 46: -0.30, 47: -0.25,
        32: -1.50, 33: -1.55, 34: -1.60, 35: -1.70, 36: -1.70, 37: -1.60, 38: -1.55, 39: -1.50,
        24: -5.00, 25: -5.00, 26: -5.00, 27: -5.00, 28: -5.00, 29: -5.00, 30: -5.00, 31: -5.00,
        16: -5.00, 17: -5.00, 18: -5.00, 19: -5.00, 20: -5.00, 21: -5.00, 22: -5.00, 23: -5.00,
        8: -8.00, 9: -8.00, 10: -8.00, 11: -8.00, 12: -8.00, 13: -8.00, 14: -8.00, 15: -8.00,
        0: -8.00, 1: -8.00, 2: -8.00, 3: -8.00, 4: -8.00, 5: -8.00, 6: -8.00, 7: -8.00
    }

    middle_game = {
        56: 0.30, 57: 0.40, 58: 0.15, 59: -0.55, 60: -0.55, 61: 0.00, 62: 0.40, 63: 0.35,
        48: 0.15, 49: 0.15, 50: -0.15, 51: -0.65, 52: -0.65, 53: -0.15, 54: 0.15, 55: 0.15,
        40: -0.15, 41: -0.25, 42: -0.55, 43: -0.80, 44: -0.80, 45: -0.55, 46: -0.25, 47: -0.15,
        32: -1.50, 33: -1.55, 34: -1.60, 35: -1.70, 36: -1.70, 37: -1.60, 38: -1.55, 39: -1.50,
        24: -5.00, 25: -5.00, 26: -5.00, 27: -5.00, 28: -5.00, 29: -5.00, 30: -5.00, 31: -5.00,
        16: -5.00, 17: -5.00, 18: -5.00, 19: -5.00, 20: -5.00, 21: -5.00, 22: -5.00, 23: -5.00,
        8: -8.00, 9: -8.00, 10: -8.00, 11: -8.00, 12: -8.00, 13: -8.00, 14: -8.00, 15: -8.00,
        0: -8.00, 1: -8.00, 2: -8.00, 3: -8.00, 4: -8.00, 5: -8.00, 6: -8.00, 7: -8.00
    }

    endgame = {
        56: -1.00, 57: -0.65, 58: -0.30, 59: 0.00, 60: 0.00, 61: -0.30, 62: -0.65, 63: -1.00,
        48: -0.65, 49: -0.30, 50: 0.00, 51: 0.10, 52: 0.10, 53: 0.00, 54: -0.30, 55: -0.65,
        40: -0.30, 41: 0.00, 42: 0.10, 43: 0.25, 44: 0.25, 45: 0.10, 46: 0.00, 47: -0.30,
        32: 0.00, 33: 0.10, 34: 0.25, 35: 0.35, 36: 0.35, 37: 0.25, 38: 0.10, 39: 0.00,
        24: 0.00, 25: 0.10, 26: 0.25, 27: 0.35, 28: 0.35, 29: 0.25, 30: 0.10, 31: 0.00,
        16: -0.30, 17: 0.00, 18: 0.10, 19: 0.25, 20: 0.25, 21: 0.10, 22: 0.00, 23: -0.30,
        8: -0.65, 9: -0.30, 10: 0.00, 11: 0.10, 12: 0.10, 13: 0.00, 14: -0.30, 15: -0.65,
        0: -1.00, 1: -0.65, 2: -0.30, 3: 0.00, 4: 0.00, 5: -0.30, 6: -0.65, 7: -1.00
    }

    #Return the pieces character
    def GetChar(self):
        return self.char

    #Method to get an isolated eval of this piece
    def getEval(self, row, col, phase_of_game):
        if phase_of_game == 'middle_game':
            return (self.middle_game[(row*8)+col] * -1) - 1000
        elif phase_of_game == 'endgame':
            return (self.endgame[(row*8)+col] * -1) - 1000
        return (self.opening[(row*8)+col] * -1) - 1000

    #Get Moves method
    def getMoves(self, board, cRow, cCol):
        moves = []

        # Loop to generate moves
        for i in range(-1, 2, 1):
            for j in range(-1, 2, 1):
                #Continue if 0,0
                if i == 0 and j == 0:
                    continue
                #Continue if square doesn't exist or occupied by friendly
                if cRow+i > 7 or cRow+i < 0 or cCol+j > 7 or cCol+j < 0 or board[cRow+i][cCol+j].material < 0:
                    continue
                target = cRow + cCol*10 + (cRow+i)*100 + (cCol+j)*1000
                moves.append(target)

        return moves

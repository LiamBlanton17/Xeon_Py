# Class for the White King

class wKing:

    #Variables
    material = 1000 #Value of material
    value = 1000 #Fluid value of the piece
    char = 'K' #Char to represent piece

    #Constructor
    def __init__(self):
        pass

    #Piece-Square map multiplier (used in isolated evaluation of pieces)
    opening = {
        56: -8.00, 57: -8.00, 58: -8.00, 59: -8.00, 60: -8.00, 61: -8.00, 62: -8.00, 63: -8.00,
        48: -8.00, 49: -8.00, 50: -8.00, 51: -8.00, 52: -8.00, 53: -8.00, 54: -8.00, 55: -8.00,
        40: -5.00, 41: -5.00, 42: -5.00, 43: -5.00, 44: -5.00, 45: -5.00, 46: -5.00, 47: -5.00,
        32: -5.00, 33: -5.00, 34: -5.00, 35: -5.00, 36: -5.00, 37: -5.00, 38: -5.00, 39: -5.00,
        24: -1.50, 25: -1.55, 26: -1.60, 27: -1.70, 28: -1.70, 29: -1.60, 30: -1.55, 31: -1.50,
        16: -0.25, 17: -0.30, 18: -0.35, 19: -0.45, 20: -0.45, 21: -0.35, 22: -0.30, 23: -0.25,
        8: 0.00, 9: 0.00, 10: -0.10, 11: -0.30, 12: -0.30, 13: -0.15, 14: -0.10, 15: 0.00,
        0: 0.15, 1: 0.35, 2: 0.25, 3: -0.25, 4: -0.05, 5: -0.15, 6: 0.35, 7: 0.20
    }

    middle_game = {
        56: -8.00, 57: -8.00, 58: -8.00, 59: -8.00, 60: -8.00, 61: -8.00, 62: -8.00, 63: -8.00,
        48: -8.00, 49: -8.00, 50: -8.00, 51: -8.00, 52: -8.00, 53: -8.00, 54: -8.00, 55: -8.00,
        40: -5.00, 41: -5.00, 42: -5.00, 43: -5.00, 44: -5.00, 45: -5.00, 46: -5.00, 47: -5.00,
        32: -5.00, 33: -5.00, 34: -5.00, 35: -5.00, 36: -5.00, 37: -5.00, 38: -5.00, 39: -5.00,
        24: -1.50, 25: -1.55, 26: -1.60, 27: -1.70, 28: -1.70, 29: -1.60, 30: -1.55, 31: -1.50,
        16: -0.15, 17: -0.25, 18: -0.55, 19: -0.80, 20: -0.80, 21: -0.55, 22: -0.25, 23: -0.15,
        8: 0.15, 9: 0.15, 10: -0.15, 11: -0.65, 12: -0.65, 13: -0.15, 14: 0.15, 15: 0.15,
        0: 0.30, 1: 0.40, 2: 0.15, 3: -0.55, 4: -0.55, 5: 0.00, 6: 0.40, 7: 0.35
    }

    endgame = {
        56: -1.00, 57: -0.65, 58: -0.30, 59: 0.00, 60: 0.00, 61: -0.30, 62: -0.65, 63: -1.00,
        48: -0.65, 49: -0.30, 50: 0.00, 51: 0.10, 52: 0.10, 53: 0.00, 54: -0.30, 55: -0.65,
        40: -0.30, 41: 0.00, 42: 0.10, 43: 0.25, 44: 0.25, 45: 0.10, 46: 0.00, 47: -0.30,
        32: 0.00, 33: 0.10, 34: 0.25, 35: 0.35, 36: 0.35, 37: 0.25, 38: 0.10, 39: 0.00,
        24: 0.00, 25: 0.10, 26: 0.25, 27: 0.35, 28: 0.35, 29: 0.25, 30: 0.10, 31: 0.00,
        16: -0.30, 17: 0.00, 18: 0.10, 19: 0.25, 20: 0.25, 21: 0.10, 22: 0.00, 23: -0.30,
        8: -0.65, 9: -0.30, 10: 0.00, 11: 0.10, 12: 0.10, 13: 0.00, 14: -0.30, 15: -0.65,
        0: -1.00, 1: -0.65, 2: -0.30, 3: 0.00, 4: 0.00, 5: -0.30, 6: -0.65, 7: -1.00
    }


    #Return the pieces character
    def GetChar(self):
        return self.char

    #Method to get an isolated eval of this piece
    def getEval(self, row, col, phase_of_game):
        if phase_of_game == 'middle_game':
            return self.middle_game[(row*8)+col] + 1000
        elif phase_of_game == 'endgame':
            return self.endgame[(row*8)+col] + 1000
        return self.opening[(row*8)+col] + 1000

    #Get Moves method
    def getMoves(self, board, cRow, cCol):
        moves = []

        # Loop to generate moves
        for i in range(-1, 2, 1):
            for j in range(-1, 2, 1):
                #Continue if 0,0
                if i == 0 and j == 0:
                    continue
                #Continue if square doesn't exist or occupied by friendly
                if cRow+i > 7 or cRow+i < 0 or cCol+j > 7 or cCol+j < 0 or board[cRow+i][cCol+j].material > 0:
                    continue
                target = cRow + cCol*10 + (cRow+i)*100 + (cCol+j)*1000
                moves.append(target)

        return moves

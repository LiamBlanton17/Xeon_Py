---------------------------------------------------------------------------------------------
------------------------------------------- TO DO -------------------------------------------
---------------------------------------------------------------------------------------------
Implement promotion - should be working, right now auto promotes to queen, fix later
Implement AI
# Sort the moves, right now only sorts captures to top
        moves = self.moves
        i = 0
        for j in range(len(moves)):
            tmove = moves[j] // 100
            row = tmove % 10
            tmove //= 10
            col = tmove
            if self.turn == 'white' and self.board[row][col].material < 0:
                hmove = moves[i]
                moves[i] = moves[j]
                move = hmove
                i += 1
            elif self.turn == 'black' and self.board[row][col].material > 0:
                hmove = moves[i]
                moves[i] = moves[j]
                moves[j] = hmove
                i += 1
---------------------------------------------------------------------------------------------
------------------------------------------ XEON AI ------------------------------------------
---------------------------------------------------------------------------------------------
HIGH LEVEL
# Returns the best move of the main board
XeonMove(MainBoard):
    depth = desired search depth
    bestMove = 0
    bestEval = -1000 if MainBoard.turn is white || 1000 if MainBoard.turn is black
    for move in MainBoard.moves:
        eval = MiniMax([MainBoard], min/max, depth).getEval
        if eval better than bestEval
            bestEval = eval
            bestMove = Move
    return bestMove

# Returns the best Board of a list of boards
MiniMax([List of Boards], min/max, depth):
    if depth has NOT been reached:
        for each Board in [List of Boards]
            Create [Children of Board]
            # Here was are replacing the current board with the best board of its children
            Board = MiniMax([Children of Board], min/max, depth+1)
    return Board with best eval (from min/max) from [List of Boards]

MORE IN DEPTH
XeonMove(MainBoard):
    ply = 0  # Current depth
    depth = 5  # Target Depth
    bestMove = 0
    if MainBoard.turn == "white":
        bestEval = -1000
        minmax = 1  # 1 for max, -1 for min
    else:
        bestEval = 1000
        minmax = -1  # 1 for max, -1 for min
    for move in MainBoard.moves:
        eval = MiniMax([MainBoard], minmax, ply, depth)
        if max && eval > bestEval:
            bestEval = eval
            bestMove = move
        if min && eval < bestEval:
            bestEval = eval
            bestMove = move
    return bestMove

MiniMax(ListOfBoards, minmax, minmax, ply, depth):
    if ply < depth:
        for Board in ListOfBoards:
            Children = GetBoardChildren(Board)
            Board = MiniMax(Children, minmax*-1, ply+1, depth)
    BestBoard = NULL
    for Board in ListOfBoards:
        if max && Board.eval > BestBoard.eval:
            BestBoard = Board
        if min && Board.eval < BestBoard.eval:
            BestBoard = Board
    return BestBoard

GetBoardChildren(Board):
    Children = []
    Board.GenerateMoves()
    for move in Board.moves:

---------------------------------------------------------------------------------------------
-------------------------------------------- PSM --------------------------------------------
---------------------------------------------------------------------------------------------
bQueen: (-9) (all values *-1) DONE
    8.50 8.50 8.75 8.95 8.95 8.75 8.50 8.50
    8.50 8.95 8.95 8.95 8.95 8.95 8.95 8.50
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    9.00 9.20 9.20 9.05 9.05 9.20 9.20 9.00
    9.00 9.05 9.05 9.05 9.05 9.05 9.05 9.00
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75

wQueen: (9) DONE
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    9.00 9.05 9.05 9.05 9.05 9.05 9.05 9.00
    9.00 9.20 9.20 9.05 9.05 9.20 9.20 9.05
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    8.50 8.95 8.95 8.95 8.95 8.95 8.95 8.50
    8.50 8.50 8.75 8.95 8.95 8.75 8.50 8.50

bKing: (1000) (Add 1000 to all values and *-1) (not endgame) DONE
    +0.25 +0.40 +0.25 -0.35 +0.00 +0.05 +0.45 +0.30
    +0.00 +0.00 +0.00 -0.35 -0.35 +0.00 +0.00 +0.00
    -0.15 -0.25 -0.25 -0.45 -0.45 -0.25 -0.25 -0.15
    -0.35 -0.55 -0.55 -1.00 -1.00 -0.55 -0.55 -0.35
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00

wKing: (1000) (Add 1000 to all values) (not endgame) DONE
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -0.35 -0.55 -0.55 -1.00 -1.00 -0.55 -0.55 -0.35
    -0.15 -0.25 -0.25 -0.45 -0.45 -0.25 -0.25 -0.15
    +0.00 +0.00 +0.00 -0.35 -0.35 +0.00 +0.00 +0.00
    +0.25 +0.40 +0.25 -0.35 +0.00 +0.05 +0.45 +0.30

bKnight: (-3) (all values *-1) DONE
    2.50 2.75 2.75 2.75 2.75 2.75 2.75 2.50
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50
    2.50 2.95 3.20 3.15 3.15 3.20 2.95 2.50
    2.75 3.00 3.20 3.20 3.20 3.20 3.00 2.75
    2.75 3.10 3.25 3.30 3.30 3.25 3.10 2.75
    2.50 3.00 3.20 3.20 3.20 3.20 3.00 2.50
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50

wKnight: (3) DONE
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50
    2.50 3.00 3.20 3.20 3.20 3.20 3.00 2.50
    2.75 3.10 3.25 3.30 3.30 3.25 3.10 2.75
    2.75 3.00 3.20 3.20 3.20 3.20 3.00 2.75
    2.50 2.95 3.20 3.15 3.15 3.20 2.95 2.50
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50
    2.50 2.75 2.75 2.75 2.75 2.75 2.75 2.50

bRook: (-5) (all values *-1) DONE
    5.05 5.05 5.10 5.15 5.15 5.10 5.05 5.05
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    5.05 5.05 5.05 5.05 5.05 5.05 5.05 5.05
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00

wRook: (5) DONE
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00
    5.05 5.05 5.05 5.05 5.05 5.05 5.05 5.05
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00
    5.05 5.05 5.10 5.15 5.15 5.10 5.05 5.05

bBishop: (-3) (all values *-1) DONE
    2.85 2.85 2.90 2.85 2.85 2.90 2.85 2.85
    2.90 3.05 2.95 2.95 2.95 2.95 3.05 2.90
    2.95 3.00 3.00 2.90 2.90 3.00 3.00 2.95
    3.00 3.05 3.15 2.95 2.95 3.15 3.05 3.00
    3.00 3.10 3.05 3.00 3.00 3.05 3.10 3.00
    3.00 3.05 3.05 3.05 3.05 3.05 3.05 3.00
    2.95 3.00 3.00 2.90 2.90 3.00 3.00 2.95
    2.85 2.85 2.90 2.85 2.85 2.90 2.85 2.85

wBishop: (3) DONE
    2.85 2.85 2.90 2.85 2.85 2.90 2.85 2.85
    2.95 3.00 3.00 2.90 2.90 3.00 3.00 2.95
    3.00 3.05 3.05 3.05 3.05 3.05 3.05 3.00
    3.00 3.10 3.05 3.00 3.00 3.05 3.10 3.00
    3.00 3.05 3.15 2.95 2.95 3.15 3.05 3.00
    2.95 3.00 3.00 2.90 2.90 3.00 3.00 2.95
    2.90 3.05 2.95 2.95 2.95 2.95 3.05 2.90
    2.85 2.85 2.90 2.85 2.85 2.90 2.85 2.85

bPawn: (-1) (all values *-1) DONE
    0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
    1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
    1.05 1.05 1.05 1.15 1.15 0.85 1.00 1.05
    1.00 1.00 1.15 1.21 1.21 0.85 0.95 0.95
    1.00 1.00 1.10 1.15 1.15 1.00 1.00 1.00
    1.05 1.05 1.12 1.17 1.17 1.05 1.05 1.05
    1.07 1.07 1.15 1.20 1.20 1.07 1.07 1.07
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00

wPawn: (1) DONE
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00
    1.07 1.07 1.15 1.20 1.20 1.07 1.07 1.07
    1.05 1.05 1.12 1.17 1.17 1.05 1.05 1.05
    1.00 1.00 1.10 1.15 1.15 1.00 1.00 1.00
    1.00 1.00 1.15 1.21 1.21 0.85 0.95 0.95
    1.05 1.05 1.05 1.15 1.15 0.85 1.00 1.05
    1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
    0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00

---------------------------------------------------------------------------------------------
----------------------------------------- GAME FLOW -----------------------------------------
---------------------------------------------------------------------------------------------
Game Flow: Using a loop
Given the mainBoard
    Print the board
    Get all the legal moves
    Until legal moves
        Take User Input
    Update mainBoard
    Continue;

---------------------------------------------------------------------------------------------
------------------------------------ SEARCHING ALGORITHM ------------------------------------
---------------------------------------------------------------------------------------------
Searching Flow

Main Function
Main(MainBoard, DEPTH, BoardHistory)
    Get the first generation of children from the MainBoard, save to list of lists : 'firstChildren' (MOVE, childBoard)
    For each 'fchild' in 'firstChildren'
        fchild[1] = Search(fchild[1], DEPTH, BoardHistory, 0) #search returns a float, the evaluation of a board position
    If its white's move
        return the tuple from 'firstChildren' with the greatest eval : child[1]
    Else
        return the tuple from 'firstChildren' with the least eval : child[1]

Search Function
Search(Board, DEPTH, BoardHistory, ply)
    If ply equals DEPTH
        return Board.eval() #if you reach the desired search depth, return the eval of the board at that depth
    Get the children from Board, save to list of Boards : 'children' [Board, ...]
    For each 'child' in 'children'
        child = search(child, DEPTH, BoardHistory, ply+1)
        #THIS IS MOST LIKELY WHERE PRUNING WILL GO
    #NOW WE HAVE A LIST OF EVALS, stored in 'children'
    If its white's move
        return the greatest eval in children
    Else
        return the least eval in children

TO ADD: Pruning, not sure how to accomplish this

NOTE: This above is the most crucial part to my AI
AI is broken into 2 blocks :: Searching, Evaluation
Searching relies on fast move generation, and pruning
Evaluation relies on lots of logic, needs to be fast
If move generation is too slow, IE too many for loops used to generate moves
FOCUS ON MAKING CODE TIME AND RESOURCE EFFICIENT

---------------------------------------------------------------------------------------------
------------------------------------ OVERVIEW OF CLASSES ------------------------------------
---------------------------------------------------------------------------------------------
DATA Management
A Board is a 2d list/array of piece objects :: board[Piece][Piece]
Board History is a List of Boards :: List[board[Piece][Piece]
A Piece is one of the subclasses of the Piece superclass
A MOVE is a String, length 4, first let/num is starting row/col, second let/num is target row/col :: "[1-8][a-h][1-8][a-h]"
Special move codes:
    8880 - White short castle
    8881 - White long castle
    9990 - Black short castle
    9991 - Black long castle
    9999 - Drawn game

MAP OF BOARD
  0a 1b 2c 3d 4e 5f 6g 7h
7 56 57 58 59 60 61 62 63
6 48 49 50 51 52 53 54 55
5 40 41 42 43 44 45 46 47
4 32 33 34 35 36 37 38 39
3 24 25 26 27 28 29 30 31
2 16 17 18 19 20 21 22 23
1 08 09 10 11 12 13 14 15
0 00 01 02 03 04 05 06 07

Classes/Files:
    Main
    Board
    Piece
        WKing
        WQueen
        WRook
        WBishop
        WKnight
        WPawn
        BKing
        BQueen
        BRook
        BBishop
        BKnight
        BPawn
        Empty
    Xeon

CLASS INFO
Main - Main game loop, User input, Initial conditions
    Attributes:
        MainBoard - List of Pieces
        boardHistory - List of Lists of Pieces (List of past boards)
    Methods:

Board - To store information of board positions
    Attributes:
        eval - Float
        toMove - Int
        board - List of Pieces
        boardHistory - List of Lists of Pieces (List of past boards)
        bKMoved - bool
        wKMoved - bool
    Methods:
        Get/Set all Attributes
        CalcEval() - Float
        PrintBoard() - Console/Void
        GenerateMoves() - List of Tuples (move, board[][])

Piece - Super class to all the unique piece classes
    Attributes:
        value - float
        piece - char (string of length 1)
        boardHistory - List of Lists of Pieces (List of past boards)
    Methods:
        Get/Set all Attributes
        GetMoves() - List of Tuples (move, board[][])

Xeon - Chess AI
    Attributes:
    Method:

---------------------------------------------------------------------------------------------
------------------------------------- GENERATING MOVES --------------------------------------
---------------------------------------------------------------------------------------------
NOTES:
- Checking if a king is in check will be done outside of the King class, in the Board class
- Checking for 3fold repetition will be done in the Board class
- Checking for 50 move rule will be done in the Board class
- Checking for mate will be done in Board class

KING
    Loop i range(-1 -> 1)
        Loop j range(-1 -> 1)
            Target square is (row+i, col+i)
            if Target has friendly piece OR if i and j are both 0 OR if Target doesn't exist
                continue to next iteration
            Add Target to list of moves
    #DESIGN: A way to legally castle:
        - King has not moved
        - Target rook has not moved
        - Not moving through check


# Making sure a move doesn't result in check
- For each of the moves
    - Create a copy of the board
    - Update the board with the move
    - Get a list of moves from that current board
    - If the king is in check (determine by seeing if the king's square is under attack)
       - Remove that move from the list of moves

---------------------------------------------------------------------------------------------
------------------------------------- BOARD HISTORY MO --------------------------------------
---------------------------------------------------------------------------------------------
Hash.py will be the class, which will contain 2 functions.

HashBoard will take a Board and return a List, where the first 64 elements are the pieces
of the given Board (a1->h8), then next element is the castling rights, and the final element is
the move turn.
HashBoard(Board) -> return list (length 66)

DeHashBoard will take a list generated by HashBoard, parse it and return the resulting board.
DeHashBoard(List[]) -> return Board

Hashed Board -> List[]
Element 0-63 :: a1-h8
Element 64 :: Castling Rights
Element 65 :: Move Turn

---------------------------------------------------------------------------------------------
------------------------------------- BACK UP OF Board --------------------------------------
---------------------------------------------------------------------------------------------
# Board Class
import copy

# Import all other classes
from wKing import *
from wQueen import *
from wRook import *
from wBishop import *
from wKnight import *
from wPawn import *
from bKing import *
from bQueen import *
from bRook import *
from bBishop import *
from bKnight import *
from bPawn import *
from Empty import *

# Class
class Board:

    # Variables
    fiftyMoves = 0  # 50 move counter
    eval = 0  # Evaluation of board
    material = 0  # Material on the board
    castlingRights = 1111  # Castleing rights, WShort, WLong, BShort, BLong

    # Constructor
    def __init__(self, board, turn, castlingRights, boardHistory):
        self.turn = turn  # Who's turn is it
        self.castlingRights = list(castlingRights)
        self.board = board.copy()  # Setting the board of the object (2d array of pieces)
        self.boardHistory = boardHistory
        self.touchMoves()
        self.moves = self.generateMoves(self.boardHistory, False, False)  # Generate moves from current board

    # Method to get the board
    def GetBoard(self):
        return self.board

    # Method to print the board to the console
    # TO DO: Swap which way it prints depending on who's move it is
    def PrintBoard(self):
        for row in range(7, -1, -1):
            print(row+1, end=" ")
            for col in range(8):
                print(self.board[row][col].char, end=" ")
            print()
        print("  A B C D E F G H")
        print()

    # Method to get material of the board
    def getMaterial(self):
        val = 0
        for row in range(8):
            for col in range(8):
                val += self.board[row][col].material
        return val

    # Method to get evaluation of the board
    def getEval(self):
        val = 0
        for row in range(8):
            for col in range(8):
                val += self.board[row][col].value
        return val

    # Method to generate move, children board pairs
    def generateMoves(self, bHistory, killCastle, killCheck):
        print("IN: Generate Moves")
        moves = []
        wKPos = 0
        bKPos = 0
        #Loop over each piece in the board
        for row in range(8):
            for col in range(8):
                #Make sure it is current players turn
                if (self.turn == 'white' and self.board[row][col].material < 0) or (self.turn == 'black' and self.board[row][col].material > 0):
                    continue
                moves.extend(self.board[row][col].getMoves(self.board, row, col))
                #Pawn Enpassant
                if self.board[row][col].char == 'P' or self.board[row][col].char == 'p':
                    moves.extend(self.board[row][col].enpassent(self.board, row, col, bHistory))
        #Check for castling
        if not killCastle:
            if self.turn == 'white':
                #White short
                if self.castlingRights[0] == '1' and self.board[0][5].material == 0 and self.board[0][6].material == 0:
                    #Below should check to see if the king is in or moving through check
                    testB = copy.deepcopy(self)  # Create a copy of the current board
                    testB.turn = 'black'  # Set this copy to the opponent
                    opponentMoves = testB.generateMoves(bHistory, True, True)  # See where opponents pieces can move it
                    #Loop through and parse out the moves to only get the target square
                    i = 0
                    for move in opponentMoves:
                        move //= 100
                        opponentMoves[i] = move
                        i += 1
                    #Determine if the king will move through check
                    moveThroughCheck = False
                    for move in opponentMoves:
                        if move == 40 or move == 50 or move == 60:
                            moveThroughCheck = True
                    if not moveThroughCheck:
                        moves.extend([8880])
                    del testB
                #White Long
                if self.castlingRights[1] == '1' and self.board[0][3].material == 0 and self.board[0][2].material == 0 and self.board[0][1] == 0:
                    #Below should check to see if the king is in or moving through check
                    testB = copy.deepcopy(self)  # Create a copy of the current board
                    testB.turn = 'black'  # Set this copy to the opponent
                    opponentMoves = testB.generateMoves(bHistory, True, True)  # See where opponents pieces can move it
                    #Loop through and parse out the moves to only get the target square
                    i = 0
                    for move in opponentMoves:
                        move //= 100
                        opponentMoves[i] = move
                        i += 1
                    #Determine if the king will move through check
                    moveThroughCheck = False
                    for move in opponentMoves:
                        if move == 40 or move == 30 or move == 20:
                            moveThroughCheck = True
                    if not moveThroughCheck:
                        moves.extend([8881])
                    del testB
            if self.turn == 'black':
                #Black short
                if self.castlingRights[2] == '1' and self.board[7][5].material == 0 and self.board[7][6].material == 0:
                    #Below should check to see if the king is in or moving through check
                    testB = copy.deepcopy(self)  # Create a copy of the current board
                    testB.turn = 'white'  # Set this copy to the opponent
                    opponentMoves = testB.generateMoves(bHistory, True, True)  # See where opponents pieces can move it
                    #Loop through and parse out the moves to only get the target square
                    i = 0
                    for move in opponentMoves:
                        move //= 100
                        opponentMoves[i] = move
                        i += 1
                    #Determine if the king will move through check
                    moveThroughCheck = False
                    for move in opponentMoves:
                        if move == 47 or move == 57 or move == 67:
                            moveThroughCheck = True
                    if not moveThroughCheck:
                        moves.extend([9990])
                    del testB
                #Black Long
                if self.castlingRights[3] == '1' and self.board[7][3].material == 0 and self.board[7][2].material == 0 and self.board[7][1] == 0:
                    #Below should check to see if the king is in or moving through check
                    testB = copy.deepcopy(self)  # Create a copy of the current board
                    testB.turn = 'white'  # Set this copy to the opponent
                    opponentMoves = testB.generateMoves(bHistory, True, True)  # See where opponents pieces can move it
                    #Loop through and parse out the moves to only get the target square
                    i = 0
                    for move in opponentMoves:
                        move //= 100
                        opponentMoves[i] = move
                        i += 1
                    #Determine if the king will move through check
                    moveThroughCheck = False
                    for move in opponentMoves:
                        if move == 47 or move == 37 or move == 27:
                            moveThroughCheck = True
                    if not moveThroughCheck:
                        moves.extend([9991])
                    del testB
        #See if king is in check after a move, and prune it
        if not killCheck:
            # Loop through the current moves, create a new board object for each
            i = 0
            for move in moves:
                moves[i] = self.isKingInCheck(move, bHistory)
                i += 1
        #Check for 3fold, check for 50move

        #List compression, remove all the 0s
        moves = [i for i in moves if i != 0]
        print("OUT: Generate Moves")
        return moves

    # Check if the king is in check
    def isKingInCheck(self, move, bHistory):
        testB = copy.deepcopy(self)
        testB.updateBoard(move, bHistory, False)
        nextMoves = testB.generateMoves(bHistory, True, True)
        holdTestB = copy.deepcopy(testB)
        for nmove in nextMoves:
            testB = copy.deepcopy(holdTestB)
            testB.updateBoard(nmove, bHistory, False)
            # testB.PrintBoard()
            if not (500 > testB.getEval() > -500):
                return 0
        del testB
        del holdTestB
        return move

    # Method used in seeing if the king is in check, all it does is create a moves list variable
    # This avoids recursion errors
    def touchMoves(self):
        self.moves = []

    # Method to update the board
    def updateBoard(self, move, bHistory, generateMoves):
        print("IN: Update Board")
        #Add the previous board to board history
        if generateMoves:
            bHistory.append(copy.deepcopy(self))

        #Get the current material
        currentMaterial = self.getMaterial()
        nRow = 0 # Needed for references
        nCol = 0 # Needed for references

        #If it's a special move
        if move == 8880:  # White, Short Castle
            self.board[0][6] = self.board[0][4]
            self.board[0][5] = self.board[0][7]
            self.board[0][4] = Empty()
            self.board[0][7] = Empty()
            self.fiftyMoves = 0
        elif move == 8881:  # White, Long Castle
            self.board[0][2] = self.board[0][4]
            self.board[0][3] = self.board[0][0]
            self.board[0][4] = Empty()
            self.board[0][0] = Empty()
            self.fiftyMoves = 0
        elif move == 9990:  # Black, Short Castle
            self.board[7][6] = self.board[7][4]
            self.board[7][5] = self.board[7][7]
            self.board[7][4] = Empty()
            self.board[7][7] = Empty()
            self.fiftyMoves = 0
        elif move == 9991:  # Black, Long Castle
            self.board[7][2] = self.board[7][4]
            self.board[7][3] = self.board[7][0]
            self.board[7][4] = Empty()
            self.board[7][0] = Empty()
            self.fiftyMoves = 0
        else:
            #Parse out the move input
            sRow = move % 10
            move //= 10
            sCol = move % 10
            move //= 10
            nRow = move % 10
            move //= 10
            nCol = move
            #Check for 50 move incrementation
            if self.board[sRow][sCol].material == 1 or self.board[sRow][sCol].material == -1:
                self.fiftyMoves = 0
            #Now check for enpassent
            if sCol != nCol and (self.board[sRow][sCol].material == 1 or self.board[sRow][sCol].material == -1):
                if self.board[sRow][sCol].material == 1 and self.board[nRow][nCol].material == 0:  # White
                    self.board[nRow-1][nCol] = Empty()
                if self.board[sRow][sCol].material == -1 and self.board[nRow][nCol].material == 0:  # Black
                    self.board[nRow+1][nCol] = Empty()
            #Make the move
            self.board[nRow][nCol] = self.board[sRow][sCol]
            self.board[sRow][sCol] = Empty()

        #If material is different, then reset 50 moves
        if self.getMaterial() != currentMaterial:
            self.fiftyMoves = 0

        #Set turn to opposite of current turn
        if self.turn == 'white':
            self.turn = 'black'
        else:
            self.turn = 'white'

        #Update castling rights
        if self.board[0][4].char != 'K':
            self.castlingRights[0] = 0
            self.castlingRights[1] = 0
        if self.board[0][0].char != 'R':
            self.castlingRights[1] = 0
        if self.board[0][7].char != 'R':
            self.castlingRights[0] = 0
        if self.board[7][4].char != 'k':
            self.castlingRights[2] = 0
            self.castlingRights[3] = 0
        if self.board[7][0].char != 'r':
            self.castlingRights[3] = 0
        if self.board[7][7].char != 'r':
            self.castlingRights[2] = 0

        #Clear all the moves, and generate the next moves
        self.moves.clear()
        if generateMoves:
            self.moves = self.generateMoves(bHistory, False, False)

        #Check for 50 moves
        if self.fiftyMoves >= 50:
            self.moves.clear()

        #Check for 3-Fold repetition
        if len(bHistory) > 3:
            matches = 1
            for i in range(len(bHistory)):
                matches += Board.CompareBoards(bHistory[i].GetBoard(), self.board)
            if matches == 3:
                self.moves.clear()

        # Check for promotion
        for i in range(8):
            if self.board[7][i].material == 1:  # White
                # Promotion
                piece = self.wPromote()
                if piece == "Q":
                    self.board[nRow][nCol] = wQueen()
                if piece == "R":
                    self.board[nRow][nCol] = wRook()
                if piece == "B":
                    self.board[nRow][nCol] = wBishop()
                if piece == "N":
                    self.board[nRow][nCol] = wKnight()
                break
            if self.board[0][i].material == -1:  # Black
                # Promotion
                piece = self.bPromote()
                if piece == "q":
                    self.board[nRow][nCol] = bQueen()
                if piece == "r":
                    self.board[nRow][nCol] = bRook()
                if piece == "b":
                    self.board[nRow][nCol] = bBishop()
                if piece == "n":
                    self.board[nRow][nCol] = bKnight()
                break

        print("OUT: Update Board")

        # Increment 50 moves
        self.fiftyMoves += 1

    # White promotion
    def wPromote(self):
        uIn = input("[WHITE] Pawn Promotion (Q, R, B, N): ")
        if uIn == "Q" or uIn == "R" or uIn == "B" or uIn == "N":
            return uIn
        print("Not a valid piece.")
        return self.wPromote()

    # Black promotion
    def bPromote(self):
        uIn = input("[BLACK] Pawn Promotion (q, r, b, n): ")
        if uIn == "q" or uIn == "r" or uIn == "b" or uIn == "n":
            return uIn
        print("Not a valid piece.")
        return self.bPromote()

    # Tests if two boards are equal, returns 0 if they are not and 1 if they are
    def CompareBoards(BoardOne, BoardTwo):
        row = 0
        while row <= 7:
            col = 0
            while col <= 7:
                if not (BoardOne[row][col].char == BoardTwo[row][col].char):
                    return 0
                col += 1
            row += 1
        return 1
---------------------------------------
BACKUP KingIsInCheck
def isKingInCheck(self, testB, move, bHistory):
        testB.updateBoard(move, bHistory, False, False)
        nextMoves = testB.generateMoves(bHistory, True)
        hashedBoard = HashBoard(testB)  # Created a saved hashed board
        holdTurn = testB.turn
        for nmove in nextMoves:
            testB.board = DeHashBoard(hashedBoard)  # Reset testB
            testB.turn = holdTurn  # Set this copy to the opponent
            testB.updateBoard(nmove, bHistory, False, False)
            # testB.PrintBoard()
            if not (500 > testB.material > -500):
                return 0
        return move
------------------------
BACKUP
for row in range(8):
            for col in range(8):
                #Make sure it is current players turn
                if (self.turn == 'white' and self.board[row][col].material < 0) or (self.turn == 'black' and self.board[row][col].material > 0) or self.board[row][col].material == 0:
                    continue
                moves.extend(self.board[row][col].getMoves(self.board, row, col))
                #Pawn Enpassant
                if (self.board[row][col].char == 'P' or self.board[row][col].char == 'p') and len(bHistory) > 0:
                    moves.extend(self.board[row][col].enpassent(self.board, row, col, len(bHistory), DeHashBoard(bHistory[len(bHistory)-1])))

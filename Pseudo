---------------------------------------------------------------------------------------------
------------------------------------------- TO DO -------------------------------------------
---------------------------------------------------------------------------------------------
Fix promotion (allow player to select pieces, just default AI to queen as its not worth hassle imo)

For the engine:
    - Order captures/killers by Piece to be captured - piece attacking (valued captures)
    - Order cut offs and previous cut offs but ranking - DONE (very small improvement)
    - Find ways to speed up genMoves (prolly still some minor stuff to be done, but its kinda quick already)
    - Improve eval function
        - Add a way to tell if in opening, middle, or endgame (first 5 moves opening, once less than 16 pieces is end game?)
        - Piece-Square tables
            - One for opening, middle, and endgame (current works for middle game mainly)
        - Look at space controlled (mainly where pawns are)
        - Give more bonuses to getting king out of center
        - Look at pieces around each king (pawns and otherwise)
        - Look at piece mobility (hard to evaluate how to score it however)

---------------------------------------------------------------------------------------------
------------------------------------------ XEON AI ------------------------------------------
---------------------------------------------------------------------------------------------
HIGH LEVEL
# Returns the best move of the main board
XeonMove(MainBoard):
    depth = desired search depth
    bestMove = 0
    bestEval = -1000 if MainBoard.turn is white || 1000 if MainBoard.turn is black
    for move in MainBoard.moves:
        eval = MiniMax([MainBoard], min/max, depth).getEval
        if eval better than bestEval
            bestEval = eval
            bestMove = Move
    return bestMove

# Returns the best Board of a list of boards
MiniMax([List of Boards], min/max, depth):
    if depth has NOT been reached:
        for each Board in [List of Boards]
            Create [Children of Board]
            # Here was are replacing the current board with the best board of its children
            Board = MiniMax([Children of Board], min/max, depth+1)
    return Board with best eval (from min/max) from [List of Boards]

MORE IN DEPTH
XeonMove(MainBoard):
    ply = 0  # Current depth
    depth = 5  # Target Depth
    bestMove = 0
    if MainBoard.turn == "white":
        bestEval = -1000
        minmax = 1  # 1 for max, -1 for min
    else:
        bestEval = 1000
        minmax = -1  # 1 for max, -1 for min
    for move in MainBoard.moves:
        eval = MiniMax([MainBoard], minmax, ply, depth)
        if max && eval > bestEval:
            bestEval = eval
            bestMove = move
        if min && eval < bestEval:
            bestEval = eval
            bestMove = move
    return bestMove

MiniMax(ListOfBoards, minmax, minmax, ply, depth):
    if ply < depth:
        for Board in ListOfBoards:
            Children = GetBoardChildren(Board)
            Board = MiniMax(Children, minmax*-1, ply+1, depth)
    BestBoard = NULL
    for Board in ListOfBoards:
        if max && Board.eval > BestBoard.eval:
            BestBoard = Board
        if min && Board.eval < BestBoard.eval:
            BestBoard = Board
    return BestBoard

GetBoardChildren(Board):
    Children = []
    Board.GenerateMoves()
    for move in Board.moves:

---------------------------------------------------------------------------------------------
-------------------------------------------- PSM --------------------------------------------
---------------------------------------------------------------------------------------------
bQueen: (-9) (all values *-1) DONE
    8.50 8.50 8.75 8.95 8.95 8.75 8.50 8.50
    8.50 8.95 8.95 8.95 8.95 8.95 8.95 8.50
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    9.00 9.20 9.20 9.05 9.05 9.20 9.20 9.00
    9.00 9.05 9.05 9.05 9.05 9.05 9.05 9.00
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75

wQueen: (9) DONE
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    9.00 9.05 9.05 9.05 9.05 9.05 9.05 9.00
    9.00 9.20 9.20 9.05 9.05 9.20 9.20 9.05
    8.75 9.00 9.00 9.00 9.00 9.00 9.00 8.75
    8.50 8.95 8.95 8.95 8.95 8.95 8.95 8.50
    8.50 8.50 8.75 8.95 8.95 8.75 8.50 8.50

bKing: (1000) (Add 1000 to all values and *-1) (not endgame) DONE
    +0.25 +0.40 +0.25 -0.35 +0.00 +0.05 +0.45 +0.30
    +0.00 +0.00 +0.00 -0.35 -0.35 +0.00 +0.00 +0.00
    -0.15 -0.25 -0.25 -0.45 -0.45 -0.25 -0.25 -0.15
    -0.35 -0.55 -0.55 -1.00 -1.00 -0.55 -0.55 -0.35
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00

wKing: (1000) (Add 1000 to all values) (not endgame) DONE
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00 -3.00
    -0.35 -0.55 -0.55 -1.00 -1.00 -0.55 -0.55 -0.35
    -0.15 -0.25 -0.25 -0.45 -0.45 -0.25 -0.25 -0.15
    +0.00 +0.00 +0.00 -0.35 -0.35 +0.00 +0.00 +0.00
    +0.25 +0.40 +0.25 -0.35 +0.00 +0.05 +0.45 +0.30

bKnight: (-3) (all values *-1) DONE
    2.50 2.75 2.75 2.75 2.75 2.75 2.75 2.50
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50
    2.50 2.95 3.20 3.15 3.15 3.20 2.95 2.50
    2.75 3.00 3.20 3.20 3.20 3.20 3.00 2.75
    2.75 3.10 3.25 3.30 3.30 3.25 3.10 2.75
    2.50 3.00 3.20 3.20 3.20 3.20 3.00 2.50
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50

wKnight: (3) DONE
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50
    2.50 3.00 3.20 3.20 3.20 3.20 3.00 2.50
    2.75 3.10 3.25 3.30 3.30 3.25 3.10 2.75
    2.75 3.00 3.20 3.20 3.20 3.20 3.00 2.75
    2.50 2.95 3.20 3.15 3.15 3.20 2.95 2.50
    2.50 2.75 2.95 2.95 2.95 2.95 2.75 2.50
    2.50 2.75 2.75 2.75 2.75 2.75 2.75 2.50

bRook: (-5) (all values *-1) DONE
    5.05 5.05 5.10 5.15 5.15 5.10 5.05 5.05
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    5.05 5.05 5.05 5.05 5.05 5.05 5.05 5.05
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00

wRook: (5) DONE
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00
    5.05 5.05 5.05 5.05 5.05 5.05 5.05 5.05
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    4.90 4.90 4.90 4.90 4.90 4.90 4.90 4.90
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00
    5.05 5.05 5.10 5.15 5.15 5.10 5.05 5.05

bBishop: (-3) (all values *-1) DONE
    2.85 2.85 2.90 2.85 2.85 2.90 2.85 2.85
    2.90 3.05 2.95 2.95 2.95 2.95 3.05 2.90
    2.95 3.00 3.00 2.90 2.90 3.00 3.00 2.95
    3.00 3.05 3.15 2.95 2.95 3.15 3.05 3.00
    3.00 3.10 3.05 3.00 3.00 3.05 3.10 3.00
    3.00 3.05 3.05 3.05 3.05 3.05 3.05 3.00
    2.95 3.00 3.00 2.90 2.90 3.00 3.00 2.95
    2.85 2.85 2.90 2.85 2.85 2.90 2.85 2.85

wBishop: (3) DONE
    2.85 2.85 2.90 2.85 2.85 2.90 2.85 2.85
    2.95 3.00 3.00 2.90 2.90 3.00 3.00 2.95
    3.00 3.05 3.05 3.05 3.05 3.05 3.05 3.00
    3.00 3.10 3.05 3.00 3.00 3.05 3.10 3.00
    3.00 3.05 3.15 2.95 2.95 3.15 3.05 3.00
    2.95 3.00 3.00 2.90 2.90 3.00 3.00 2.95
    2.90 3.05 2.95 2.95 2.95 2.95 3.05 2.90
    2.85 2.85 2.90 2.85 2.85 2.90 2.85 2.85

bPawn: (-1) (all values *-1) DONE
    0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
    1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
    1.05 1.05 1.05 1.15 1.15 0.85 1.00 1.05
    1.00 1.00 1.15 1.21 1.21 0.85 0.95 0.95
    1.00 1.00 1.10 1.15 1.15 1.00 1.00 1.00
    1.05 1.05 1.12 1.17 1.17 1.05 1.05 1.05
    1.07 1.07 1.15 1.20 1.20 1.07 1.07 1.07
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00

wPawn: (1) DONE
    5.00 5.00 5.00 5.00 5.00 5.00 5.00 5.00
    1.07 1.07 1.15 1.20 1.20 1.07 1.07 1.07
    1.05 1.05 1.12 1.17 1.17 1.05 1.05 1.05
    1.00 1.00 1.10 1.15 1.15 1.00 1.00 1.00
    1.00 1.00 1.15 1.21 1.21 0.85 0.95 0.95
    1.05 1.05 1.05 1.15 1.15 0.85 1.00 1.05
    1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
    0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00

---------------------------------------------------------------------------------------------
----------------------------------------- GAME FLOW -----------------------------------------
---------------------------------------------------------------------------------------------
Game Flow: Using a loop
Given the mainBoard
    Print the board
    Get all the legal moves
    Until legal moves
        Take User Input
    Update mainBoard
    Continue;

---------------------------------------------------------------------------------------------
------------------------------------ SEARCHING ALGORITHM ------------------------------------
---------------------------------------------------------------------------------------------
Searching Flow

Main Function
Main(MainBoard, DEPTH, BoardHistory)
    Get the first generation of children from the MainBoard, save to list of lists : 'firstChildren' (MOVE, childBoard)
    For each 'fchild' in 'firstChildren'
        fchild[1] = Search(fchild[1], DEPTH, BoardHistory, 0) #search returns a float, the evaluation of a board position
    If its white's move
        return the tuple from 'firstChildren' with the greatest eval : child[1]
    Else
        return the tuple from 'firstChildren' with the least eval : child[1]

Search Function
Search(Board, DEPTH, BoardHistory, ply)
    If ply equals DEPTH
        return Board.eval() #if you reach the desired search depth, return the eval of the board at that depth
    Get the children from Board, save to list of Boards : 'children' [Board, ...]
    For each 'child' in 'children'
        child = search(child, DEPTH, BoardHistory, ply+1)
        #THIS IS MOST LIKELY WHERE PRUNING WILL GO
    #NOW WE HAVE A LIST OF EVALS, stored in 'children'
    If its white's move
        return the greatest eval in children
    Else
        return the least eval in children

TO ADD: Pruning, not sure how to accomplish this

NOTE: This above is the most crucial part to my AI
AI is broken into 2 blocks :: Searching, Evaluation
Searching relies on fast move generation, and pruning
Evaluation relies on lots of logic, needs to be fast
If move generation is too slow, IE too many for loops used to generate moves
FOCUS ON MAKING CODE TIME AND RESOURCE EFFICIENT

---------------------------------------------------------------------------------------------
------------------------------------ OVERVIEW OF CLASSES ------------------------------------
---------------------------------------------------------------------------------------------
DATA Management
A Board is a 2d list/array of piece objects :: board[Piece][Piece]
Board History is a List of Boards :: List[board[Piece][Piece]
A Piece is one of the subclasses of the Piece superclass
A MOVE is a String, length 4, first let/num is starting row/col, second let/num is target row/col :: "[1-8][a-h][1-8][a-h]"
Special move codes:
    8880 - White short castle
    8881 - White long castle
    9990 - Black short castle
    9991 - Black long castle
    9999 - Drawn game

MAP OF BOARD
  0a 1b 2c 3d 4e 5f 6g 7h
7 56 57 58 59 60 61 62 63
6 48 49 50 51 52 53 54 55
5 40 41 42 43 44 45 46 47
4 32 33 34 35 36 37 38 39
3 24 25 26 27 28 29 30 31
2 16 17 18 19 20 21 22 23
1 08 09 10 11 12 13 14 15
0 00 01 02 03 04 05 06 07

Classes/Files:
    Main
    Board
    Piece
        WKing
        WQueen
        WRook
        WBishop
        WKnight
        WPawn
        BKing
        BQueen
        BRook
        BBishop
        BKnight
        BPawn
        Empty
    Xeon

CLASS INFO
Main - Main game loop, User input, Initial conditions
    Attributes:
        MainBoard - List of Pieces
        boardHistory - List of Lists of Pieces (List of past boards)
    Methods:

Board - To store information of board positions
    Attributes:
        eval - Float
        toMove - Int
        board - List of Pieces
        boardHistory - List of Lists of Pieces (List of past boards)
        bKMoved - bool
        wKMoved - bool
    Methods:
        Get/Set all Attributes
        CalcEval() - Float
        PrintBoard() - Console/Void
        GenerateMoves() - List of Tuples (move, board[][])

Piece - Super class to all the unique piece classes
    Attributes:
        value - float
        piece - char (string of length 1)
        boardHistory - List of Lists of Pieces (List of past boards)
    Methods:
        Get/Set all Attributes
        GetMoves() - List of Tuples (move, board[][])

Xeon - Chess AI
    Attributes:
    Method:

---------------------------------------------------------------------------------------------
------------------------------------- GENERATING MOVES --------------------------------------
---------------------------------------------------------------------------------------------
NOTES:
- Checking if a king is in check will be done outside of the King class, in the Board class
- Checking for 3fold repetition will be done in the Board class
- Checking for 50 move rule will be done in the Board class
- Checking for mate will be done in Board class

KING
    Loop i range(-1 -> 1)
        Loop j range(-1 -> 1)
            Target square is (row+i, col+i)
            if Target has friendly piece OR if i and j are both 0 OR if Target doesn't exist
                continue to next iteration
            Add Target to list of moves
    #DESIGN: A way to legally castle:
        - King has not moved
        - Target rook has not moved
        - Not moving through check


# Making sure a move doesn't result in check
- For each of the moves
    - Create a copy of the board
    - Update the board with the move
    - Get a list of moves from that current board
    - If the king is in check (determine by seeing if the king's square is under attack)
       - Remove that move from the list of moves

---------------------------------------------------------------------------------------------
------------------------------------- BOARD HISTORY MO --------------------------------------
---------------------------------------------------------------------------------------------
Hash.py will be the class, which will contain 2 functions.

HashBoard will take a Board and return a List, where the first 64 elements are the pieces
of the given Board (a1->h8), then next element is the castling rights, and the final element is
the move turn.
HashBoard(Board) -> return list (length 66)

DeHashBoard will take a list generated by HashBoard, parse it and return the resulting board.
DeHashBoard(List[]) -> return Board

Hashed Board -> List[]
Element 0-63 :: a1-h8
Element 64 :: Castling Rights
Element 65 :: Move Turn

------------------------------------------ PSTs ------------------------------------------
MAP OF BOARD
  0a 1b 2c 3d 4e 5f 6g 7h
7 56 57 58 59 60 61 62 63
6 48 49 50 51 52 53 54 55
5 40 41 42 43 44 45 46 47
4 32 33 34 35 36 37 38 39
3 24 25 26 27 28 29 30 31
2 16 17 18 19 20 21 22 23
1 08 09 10 11 12 13 14 15
0 00 01 02 03 04 05 06 07

----- wQueen PSTs ----- DONE
(Standard value of +9)
Opening:
-0.30 -0.30 -0.30 -0.30 -0.30 -0.30 -0.30 -0.30
-0.25 -0.25 -0.30 -0.35 -0.35 -0.35 -0.25 -0.25
-0.20 -0.25 -0.30 -0.35 -0.35 -0.35 -0.25 -0.20
-0.10 -0.20 -0.25 -0.30 -0.30 -0.25 -0.20 -0.10
-0.05 -0.10 -0.20 -0.25 -0.25 -0.25 -0.15 -0.10
-0.05 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00 -0.10
-0.15 -0.05 +0.00 +0.00 +0.00 -0.05 -0.15 -0.20
-0.30 -0.20 -0.10 +0.00 +0.00 -0.15 -0.25 -0.35

Middle-Game:
+0.10 +0.25 +0.25 +0.10 +0.10 +0.25 +0.25 +0.10
+0.10 +0.25 +0.25 +0.10 +0.10 +0.25 +0.25 +0.10
+0.10 +0.25 +0.25 +0.10 +0.10 +0.25 +0.25 +0.10
+0.05 +0.15 +0.15 +0.05 +0.05 +0.15 +0.15 +0.05
+0.00 +0.05 +0.10 +0.05 +0.05 +0.10 +0.10 +0.00
-0.20 +0.05 +0.05 +0.00 +0.00 +0.05 +0.05 -0.20
-0.30 -0.20 +0.00 +0.00 +0.00 -0.10 -0.15 -0.35
-0.40 -0.30 -0.20 -0.05 -0.15 -0.25 -0.35 -0.45

Endgame:
-0.45 -0.35 -0.25 -0.10 -0.10 -0.25 -0.35 -0.45
-0.35 -0.20 -0.05 +0.05 +0.05 -0.05 -0.20 -0.35
-0.25 -0.05 +0.05 +0.15 +0.15 +0.05 -0.05 -0.25
-0.10 +0.05 +0.15 +0.25 +0.25 +0.15 +0.05 -0.10
-0.10 +0.05 +0.15 +0.25 +0.25 +0.15 +0.05 -0.10
-0.25 -0.05 +0.05 +0.15 +0.15 +0.05 -0.05 -0.25
-0.35 -0.20 -0.05 +0.05 +0.05 -0.05 -0.20 -0.35
-0.45 -0.35 -0.25 -0.10 -0.10 -0.25 -0.35 -0.45

----- bQueen PSTs ----- DONE
(Standard value of -9) (multiply PST values by -1)
Opening:
-0.30 -0.20 -0.10 +0.00 +0.00 -0.15 -0.25 -0.35
-0.15 -0.05 +0.00 +0.00 +0.00 -0.05 -0.15 -0.20
-0.05 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00 -0.10
-0.05 -0.10 -0.20 -0.25 -0.25 -0.25 -0.15 -0.10
-0.10 -0.20 -0.25 -0.30 -0.30 -0.25 -0.20 -0.10
-0.20 -0.25 -0.30 -0.35 -0.35 -0.35 -0.25 -0.20
-0.25 -0.25 -0.30 -0.35 -0.35 -0.35 -0.25 -0.25
-0.30 -0.30 -0.30 -0.30 -0.30 -0.30 -0.30 -0.30

Middle-Game:
-0.40 -0.30 -0.20 -0.05 -0.15 -0.25 -0.35 -0.45
-0.30 -0.20 +0.00 +0.00 +0.00 -0.10 -0.15 -0.35
-0.20 +0.05 +0.05 +0.00 +0.00 +0.05 +0.05 -0.20
+0.00 +0.05 +0.10 +0.05 +0.05 +0.10 +0.10 +0.00
+0.05 +0.15 +0.15 +0.05 +0.05 +0.15 +0.15 +0.05
+0.10 +0.25 +0.25 +0.10 +0.10 +0.25 +0.25 +0.10
+0.10 +0.25 +0.25 +0.10 +0.10 +0.25 +0.25 +0.10
+0.10 +0.25 +0.25 +0.10 +0.10 +0.25 +0.25 +0.10

Endgame:
-0.45 -0.35 -0.25 -0.10 -0.10 -0.25 -0.35 -0.45
-0.35 -0.20 -0.05 +0.05 +0.05 -0.05 -0.20 -0.35
-0.25 -0.05 +0.05 +0.15 +0.15 +0.05 -0.05 -0.25
-0.10 +0.05 +0.15 +0.25 +0.25 +0.15 +0.05 -0.10
-0.10 +0.05 +0.15 +0.25 +0.25 +0.15 +0.05 -0.10
-0.25 -0.05 +0.05 +0.15 +0.15 +0.05 -0.05 -0.25
-0.35 -0.20 -0.05 +0.05 +0.05 -0.05 -0.20 -0.35
-0.45 -0.35 -0.25 -0.10 -0.10 -0.25 -0.35 -0.45

----- wRook PSTs ----- DONE
(Standard value of +5)
Opening:
-0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25
-0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25
-0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35
-0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35
-0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35
-0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25
-0.15 -0.15 -0.10 -0.10 -0.10 -0.10 -0.15 -0.15
+0.00 +0.00 +0.10 +0.15 +0.15 -0.15 -0.10 -0.05

Middle-Game:
+0.00 +0.10 +0.15 +0.15 +0.15 +0.15 +0.10 +0.00
+0.05 +0.15 +0.20 +0.20 +0.20 +0.20 +0.15 +0.05
-0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20
-0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20
-0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20
-0.15 -0.10 -0.05 +0.00 +0.00 -0.05 -0.10 -0.15
-0.10 -0.05 +0.05 +0.10 +0.10 +0.05 -0.05 -0.10
-0.05 +0.05 +0.15 +0.25 +0.25 +0.15 +0.05 -0.05

Endgame:
+0.00 +0.10 +0.20 +0.20 +0.20 +0.20 +0.10 +0.00
+0.05 +0.15 +0.25 +0.25 +0.25 +0.25 +0.15 +0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05

----- bRook PSTs ----- DONE
(Standard value of -5) (multiply PST values by -1)
Opening:
+0.00 +0.00 +0.10 +0.15 +0.15 -0.15 -0.10 -0.05
-0.15 -0.15 -0.10 -0.10 -0.10 -0.10 -0.15 -0.15
-0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25
-0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35
-0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35
-0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35 -0.35
-0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25
-0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25 -0.25

Middle-Game:
-0.05 +0.05 +0.15 +0.25 +0.25 +0.15 +0.05 -0.05
-0.10 -0.05 +0.05 +0.10 +0.10 +0.05 -0.05 -0.10
-0.15 -0.10 -0.05 +0.00 +0.00 -0.05 -0.10 -0.15
-0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20
-0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20
-0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20
+0.05 +0.15 +0.20 +0.20 +0.20 +0.20 +0.15 +0.05
+0.00 +0.10 +0.15 +0.15 +0.15 +0.15 +0.10 +0.00

Endgame:
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
-0.05 +0.05 +0.15 +0.15 +0.15 +0.15 +0.05 -0.05
+0.05 +0.15 +0.25 +0.25 +0.25 +0.25 +0.15 +0.05
+0.00 +0.10 +0.20 +0.20 +0.20 +0.20 +0.10 +0.00

----- wBishop PSTs ----- DONE
(Standard value of +3)
Opening:
-0.15 -0.10 -0.05 -0.05 -0.05 -0.05 -0.10 -0.15
-0.05 +0.00 +0.05 +0.05 +0.05 +0.05 +0.00 -0.05
+0.00 +0.05 +0.10 +0.10 +0.10 +0.10 +0.05 +0.00
+0.05 +0.25 +0.05 +0.05 +0.05 +0.05 +0.25 +0.05
+0.05 +0.05 +0.25 +0.05 +0.05 +0.25 +0.05 +0.05
-0.20 +0.05 +0.00 +0.00 +0.00 +0.00 +0.05 -0.20
-0.10 +0.15 +0.00 +0.05 +0.05 -0.10 +0.15 -0.10
-0.45 -0.35 -0.05 -0.15 -0.15 -0.10 -0.35 -0.45

Middle-Game:
-0.15 -0.10 -0.05 -0.05 -0.05 -0.05 -0.10 -0.15
-0.05 +0.00 +0.05 +0.05 +0.05 +0.05 +0.00 -0.05
+0.00 +0.05 +0.10 +0.10 +0.10 +0.10 +0.05 +0.00
+0.05 +0.30 +0.10 +0.10 +0.10 +0.10 +0.30 +0.05
+0.05 +0.15 +0.30 +0.15 +0.15 +0.30 +0.15 +0.05
+0.00 +0.10 +0.15 +0.15 +0.15 +0.00 +0.10 +0.00
+0.00 +0.30 +0.15 +0.00 +0.00 -0.05 +0.30 +0.00
-0.45 -0.20 -0.15 -0.15 -0.15 -0.15 -0.20 -0.45

Endgame:
-0.45 -0.25 -0.10 +0.00 +0.00 -0.10 -0.25 -0.45
-0.25 -0.10 +0.00 +0.15 +0.15 +0.00 -0.10 -0.25
-0.10 +0.00 +0.15 +0.25 +0.25 +0.15 +0.00 -0.10
+0.00 +0.15 +0.25 +0.25 +0.25 +0.25 +0.15 +0.00
+0.00 +0.15 +0.25 +0.25 +0.25 +0.25 +0.15 +0.00
-0.10 +0.00 +0.15 +0.25 +0.25 +0.15 +0.00 -0.10
-0.25 -0.10 +0.00 +0.15 +0.15 +0.00 -0.10 -0.25
-0.45 -0.25 -0.10 +0.00 +0.00 -0.10 -0.25 -0.45

----- bBishop PSTs ----- DONE
(Standard value of -3) (multiply PST values by -1)
Opening:
-0.45 -0.35 -0.05 -0.15 -0.15 -0.10 -0.35 -0.45
-0.10 +0.15 +0.00 +0.05 +0.05 -0.10 +0.15 -0.10
-0.20 +0.05 +0.00 +0.00 +0.00 +0.00 +0.05 -0.20
+0.05 +0.05 +0.25 +0.05 +0.05 +0.25 +0.05 +0.05
+0.05 +0.25 +0.05 +0.05 +0.05 +0.05 +0.25 +0.05
+0.00 +0.05 +0.10 +0.10 +0.10 +0.10 +0.05 +0.00
-0.05 +0.00 +0.05 +0.05 +0.05 +0.05 +0.00 -0.05
-0.15 -0.10 -0.05 -0.05 -0.05 -0.05 -0.10 -0.15

Middle-Game:
-0.45 -0.20 -0.15 -0.15 -0.15 -0.15 -0.20 -0.45
+0.00 +0.30 +0.15 +0.00 +0.00 -0.05 +0.30 +0.00
+0.00 +0.10 +0.15 +0.15 +0.15 +0.00 +0.10 +0.00
+0.05 +0.15 +0.30 +0.15 +0.15 +0.30 +0.15 +0.05
+0.05 +0.30 +0.10 +0.10 +0.10 +0.10 +0.30 +0.05
+0.00 +0.05 +0.10 +0.10 +0.10 +0.10 +0.05 +0.00
-0.05 +0.00 +0.05 +0.05 +0.05 +0.05 +0.00 -0.05
-0.15 -0.10 -0.05 -0.05 -0.05 -0.05 -0.10 -0.15

Endgame:
-0.45 -0.25 -0.10 +0.00 +0.00 -0.10 -0.25 -0.45
-0.25 -0.10 +0.00 +0.15 +0.15 +0.00 -0.10 -0.25
-0.10 +0.00 +0.15 +0.25 +0.25 +0.15 +0.00 -0.10
+0.00 +0.15 +0.25 +0.25 +0.25 +0.25 +0.15 +0.00
+0.00 +0.15 +0.25 +0.25 +0.25 +0.25 +0.15 +0.00
-0.10 +0.00 +0.15 +0.25 +0.25 +0.15 +0.00 -0.10
-0.25 -0.10 +0.00 +0.15 +0.15 +0.00 -0.10 -0.25
-0.45 -0.25 -0.10 +0.00 +0.00 -0.10 -0.25 -0.45

----- wKnight PSTs ----- DONE
(Standard value of +3)
Opening:
-0.55 -0.15 -0.15 -0.25 -0.25 -0.15 -0.20 -0.55
-0.25 +0.05 +0.10 +0.10 +0.10 +0.10 +0.05 -0.25
-0.25 +0.15 +0.20 +0.20 +0.20 +0.20 +0.15 -0.25
-0.25 +0.15 +0.20 +0.20 +0.20 +0.20 +0.15 -0.25
-0.25 +0.15 +0.20 +0.15 +0.15 +0.20 +0.15 -0.25
-0.25 +0.10 +0.25 +0.00 +0.00 +0.25 +0.10 -0.25
-0.30 -0.25 -0.15 +0.05 +0.05 -0.15 -0.25 -0.30
-0.55 -0.15 -0.15 -0.25 -0.25 -0.15 -0.20 -0.55

Middle-Game:
-0.35 -0.20 -0.15 -0.10 -0.10 -0.15 -0.20 -0.35
-0.25 +0.05 +0.20 +0.25 +0.25 +0.20 +0.05 -0.25
-0.25 +0.15 +0.30 +0.35 +0.35 +0.30 +0.15 -0.25
-0.25 +0.15 +0.25 +0.35 +0.35 +0.25 +0.15 -0.25
-0.25 +0.10 +0.25 +0.25 +0.25 +0.25 +0.10 -0.25
-0.25 +0.05 +0.20 +0.25 +0.25 +0.20 +0.05 -0.25
-0.35 -0.20 -0.15 -0.10 -0.10 -0.15 -0.20 -0.35
-0.55 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.55

Endgame:
-0.50 -0.40 -0.25 -0.10 -0.10 -0.25 -0.40 -0.50
-0.40 -0.25 -0.10 +0.00 +0.00 -0.10 -0.25 -0.40
-0.25 -0.10 +0.00 +0.10 +0.10 +0.00 -0.10 -0.25
-0.10 +0.00 +0.10 +0.20 +0.20 +0.10 +0.00 -0.10
-0.10 +0.00 +0.10 +0.20 +0.20 +0.10 +0.00 -0.10
-0.25 -0.10 +0.00 +0.10 +0.10 +0.00 -0.10 -0.25
-0.40 -0.25 -0.10 +0.00 +0.00 -0.10 -0.25 -0.40
-0.50 -0.40 -0.25 -0.10 -0.10 -0.25 -0.40 -0.50

----- bKnight PSTs ----- DONE
(Standard value of -3) (multiply PST values by -1)
Opening:
-0.55 -0.15 -0.15 -0.25 -0.25 -0.15 -0.20 -0.55
-0.30 -0.25 -0.15 +0.05 +0.05 -0.15 -0.25 -0.30
-0.25 +0.10 +0.25 +0.00 +0.00 +0.25 +0.10 -0.25
-0.25 +0.15 +0.20 +0.15 +0.15 +0.20 +0.15 -0.25
-0.25 +0.15 +0.20 +0.20 +0.20 +0.20 +0.15 -0.25
-0.25 +0.15 +0.20 +0.20 +0.20 +0.20 +0.15 -0.25
-0.25 +0.05 +0.10 +0.10 +0.10 +0.10 +0.05 -0.25
-0.55 -0.15 -0.15 -0.25 -0.25 -0.15 -0.20 -0.55

Middle-Game:
-0.55 -0.20 -0.20 -0.20 -0.20 -0.20 -0.20 -0.55
-0.35 -0.20 -0.15 -0.10 -0.10 -0.15 -0.20 -0.35
-0.25 +0.05 +0.20 +0.25 +0.25 +0.20 +0.05 -0.25
-0.25 +0.10 +0.25 +0.25 +0.25 +0.25 +0.10 -0.25
-0.25 +0.15 +0.25 +0.35 +0.35 +0.25 +0.15 -0.25
-0.25 +0.15 +0.30 +0.35 +0.35 +0.30 +0.15 -0.25
-0.25 +0.05 +0.20 +0.25 +0.25 +0.20 +0.05 -0.25
-0.35 -0.20 -0.15 -0.10 -0.10 -0.15 -0.20 -0.35

Endgame:
-0.50 -0.40 -0.25 -0.10 -0.10 -0.25 -0.40 -0.50
-0.40 -0.25 -0.10 +0.00 +0.00 -0.10 -0.25 -0.40
-0.25 -0.10 +0.00 +0.10 +0.10 +0.00 -0.10 -0.25
-0.10 +0.00 +0.10 +0.20 +0.20 +0.10 +0.00 -0.10
-0.10 +0.00 +0.10 +0.20 +0.20 +0.10 +0.00 -0.10
-0.25 -0.10 +0.00 +0.10 +0.10 +0.00 -0.10 -0.25
-0.40 -0.25 -0.10 +0.00 +0.00 -0.10 -0.25 -0.40
-0.50 -0.40 -0.25 -0.10 -0.10 -0.25 -0.40 -0.50

----- wPawn PSTs ----- DONE
(Standard value of +1)
Opening:
+5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00
+0.10 +0.15 +0.30 +0.30 +0.30 +0.25 +0.15 +0.15
+0.00 +0.05 +0.20 +0.25 +0.25 +0.15 +0.05 +0.00
+0.10 +0.05 +0.25 +0.30 +0.30 +0.00 -0.05 +0.00
+0.05 +0.05 +0.20 +0.25 +0.25 -0.05 -0.05 -0.05
+0.05 +0.05 +0.10 +0.10 +0.10 -0.15 +0.00 +0.05
+0.00 +0.00 -0.05 -0.25 -0.25 +0.10 +0.05 +0.00
+0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00

Middle-Game:
+5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00
+0.30 +0.30 +0.35 +0.45 +0.45 +0.25 +0.25 +0.25
+0.20 +0.20 +0.25 +0.35 +0.35 +0.10 +0.10 +0.15
+0.15 +0.15 +0.20 +0.30 +0.30 +0.05 +0.00 +0.10
+0.05 +0.05 +0.15 +0.25 +0.25 +0.00 +0.00 +0.05
+0.00 +0.00 +0.05 +0.15 +0.15 -0.15 +0.10 +0.10
-0.05 -0.05 -0.05 -0.35 -0.35 +0.10 +0.10 +0.05
+0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00

Endgame:
+5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00
+0.55 +0.55 +0.40 +0.40 +0.40 +0.40 +0.55 +0.55
+0.30 +0.30 +0.20 +0.20 +0.20 +0.20 +0.30 +0.30
+0.20 +0.20 +0.10 +0.10 +0.10 +0.10 +0.20 +0.20
+0.10 +0.10 +0.05 +0.05 +0.05 +0.05 +0.10 +0.10
+0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00
-0.05 -0.05 -0.05 -0.05 -0.05 -0.05 -0.05 -0.05
+0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00

----- bPawn PSTs ----- DONE
(Standard value of -1) (multiply PST values by -1)
Opening:
+0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00
+0.00 +0.00 -0.05 -0.25 -0.25 +0.10 +0.05 +0.00
+0.05 +0.05 +0.10 +0.10 +0.10 -0.15 +0.00 +0.05
+0.05 +0.05 +0.20 +0.25 +0.25 -0.05 -0.05 -0.05
+0.10 +0.05 +0.25 +0.30 +0.30 +0.00 -0.05 +0.00
+0.00 +0.05 +0.20 +0.25 +0.25 +0.15 +0.05 +0.00
+0.10 +0.15 +0.30 +0.30 +0.30 +0.25 +0.15 +0.15
+5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00

Middle-Game:
+0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00
-0.05 -0.05 -0.05 -0.35 -0.35 +0.10 +0.10 +0.05
+0.00 +0.00 +0.05 +0.15 +0.15 -0.15 +0.10 +0.10
+0.05 +0.05 +0.15 +0.25 +0.25 +0.00 +0.00 +0.05
+0.15 +0.15 +0.20 +0.30 +0.30 +0.05 +0.00 +0.10
+0.20 +0.20 +0.25 +0.35 +0.35 +0.10 +0.10 +0.15
+0.30 +0.30 +0.35 +0.45 +0.45 +0.25 +0.25 +0.25
+5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00

Endgame:
+0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00
-0.05 -0.05 -0.05 -0.05 -0.05 -0.05 -0.05 -0.05
+0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00
+0.10 +0.10 +0.05 +0.05 +0.05 +0.05 +0.10 +0.10
+0.20 +0.20 +0.10 +0.10 +0.10 +0.10 +0.20 +0.20
+0.30 +0.30 +0.20 +0.20 +0.20 +0.20 +0.30 +0.30
+0.55 +0.55 +0.40 +0.40 +0.40 +0.40 +0.55 +0.55
+5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00 +5.00

----- wKing PSTs ----- DONE
(Standard value of +1000)
Opening:
-8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00
-8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00
-5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00
-5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00
-1.50 -1.55 -1.60 -1.70 -1.70 -1.60 -1.55 -1.50
-0.25 -0.30 -0.35 -0.45 -0.45 -0.35 -0.30 -0.25
+0.00 +0.00 -0.10 -0.30 -0.30 -0.15 -0.10 +0.00
+0.15 +0.35 +0.25 -0.25 -0.05 -0.15 +0.35 +0.20

Middle-Game:
-8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00
-8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00
-5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00
-5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00
-1.50 -1.55 -1.60 -1.70 -1.70 -1.60 -1.55 -1.50
-0.15 -0.25 -0.55 -0.80 -0.80 -0.55 -0.25 -0.15
+0.15 +0.15 -0.15 -0.65 -0.65 -0.15 +0.15 +0.15
+0.30 +0.40 +0.15 -0.55 -0.55 +0.00 +0.40 +0.35

Endgame:
-1.00 -0.65 -0.30 +0.00 +0.00 -0.30 -0.65 -1.00
-0.65 -0.30 +0.00 +0.10 +0.10 +0.00 -0.30 -0.65
-0.30 +0.00 +0.10 +0.25 +0.25 +0.10 +0.00 -0.30
+0.00 +0.10 +0.25 +0.35 +0.35 +0.25 +0.10 +0.00
+0.00 +0.10 +0.25 +0.35 +0.35 +0.25 +0.10 +0.00
-0.30 +0.00 +0.10 +0.25 +0.25 +0.10 +0.00 -0.30
-0.65 -0.30 +0.00 +0.10 +0.10 +0.00 -0.30 -0.65
-1.00 -0.65 -0.30 +0.00 +0.00 -0.30 -0.65 -1.00

----- bKing PSTs ----- DONE
(Standard value of -1000) (multiply PST values by -1)
Opening:
+0.15 +0.35 +0.25 -0.25 -0.05 -0.15 +0.35 +0.20
+0.00 +0.00 -0.10 -0.30 -0.30 -0.15 -0.10 +0.00
-0.25 -0.30 -0.35 -0.45 -0.45 -0.35 -0.30 -0.25
-1.50 -1.55 -1.60 -1.70 -1.70 -1.60 -1.55 -1.50
-5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00
-5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00
-8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00
-8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00

Middle-Game:
+0.30 +0.40 +0.15 -0.55 -0.55 +0.00 +0.40 +0.35
+0.15 +0.15 -0.15 -0.65 -0.65 -0.15 +0.15 +0.15
-0.15 -0.25 -0.55 -0.80 -0.80 -0.55 -0.25 -0.15
-1.50 -1.55 -1.60 -1.70 -1.70 -1.60 -1.55 -1.50
-5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00
-5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00 -5.00
-8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00
-8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00 -8.00

Endgame:
-1.00 -0.65 -0.30 +0.00 +0.00 -0.30 -0.65 -1.00
-0.65 -0.30 +0.00 +0.10 +0.10 +0.00 -0.30 -0.65
-0.30 +0.00 +0.10 +0.25 +0.25 +0.10 +0.00 -0.30
+0.00 +0.10 +0.25 +0.35 +0.35 +0.25 +0.10 +0.00
+0.00 +0.10 +0.25 +0.35 +0.35 +0.25 +0.10 +0.00
-0.30 +0.00 +0.10 +0.25 +0.25 +0.10 +0.00 -0.30
-0.65 -0.30 +0.00 +0.10 +0.10 +0.00 -0.30 -0.65
-1.00 -0.65 -0.30 +0.00 +0.00 -0.30 -0.65 -1.00

    # Return a list of hashed children boards
    def GetChildren(self, bHistory, K1, K2, K3, coMoves, pcoMoves):
        Children = []
        hashedBoard = HashBoard(self)
        testB = Board(DeHashBoard(hashedBoard), self.turn, self.castlingRights, bHistory, False)
        holdTurn = self.turn
        # Sort the moves, right now only sorts captures to top and killer moves, put pawn moves at back
        moves = self.moves
        i = 0
        for j in range(len(moves)):
            if moves[j] == K1:
                moves[i], moves[j] = moves[j], moves[i]
                i += 1
                continue
            if moves[j] == K2:
                moves[i], moves[j] = moves[j], moves[i]
                i += 1
                continue
            if moves[j] == K3:
                moves[i], moves[j] = moves[j], moves[i]
                i += 1
                continue
            tmove = moves[j] // 100
            trow = tmove % 10
            tmove //= 10
            tcol = tmove
            if not (0 <= tcol <= 7 and 0 <= trow <= 7):
                continue
            if self.turn == 'white' and self.board[trow][tcol].material < 0:
                moves[i], moves[j] = moves[j], moves[i]
                i += 1
            elif self.turn == 'black' and self.board[trow][tcol].material > 0:
                moves[i], moves[j] = moves[j], moves[i]
                i += 1
        # For non-captures and non-killers, order by cutoffs if possible
        ogi = i  # Hold original i value
        for k in range(i, len(moves)):
            if not moves[k] in coMoves:
                continue
            moves[i], moves[k] = moves[k], moves[i]
            for j in range(i, ogi, -1):  # Order moves by cutoff value
                if coMoves[moves[j]] > coMoves[moves[j-1]]:
                    moves[j-1], moves[j] = moves[j], moves[j-1]
                else:
                    break
            i += 1
        ogi = i  # Hold original i value
        # Order by previous cutoffs
        for k in range(i, len(moves)):
            if not moves[k] in pcoMoves:
                continue
            moves[i], moves[k] = moves[k], moves[i]
            for j in range(i, ogi, -1):  # Order moves by pcutoff value
                if pcoMoves[moves[j]] > pcoMoves[moves[j-1]]:
                    moves[j-1], moves[j] = moves[j], moves[j-1]
                else:
                    break
            i += 1
        # Look at castling next
        for k in range(i, len(moves)):
            if moves[k] == 8880 or moves[k] == 8881 or moves[k] == 9990 or moves[k] == 9991:
                moves[i], moves[k] = moves[k], moves[i]
                i += 1
        for move in moves:
            testB.board = DeHashBoard(hashedBoard)  # Reset testB
            testB.turn = holdTurn
            testB.updateBoard(move, bHistory, False, False)
            Children.append([HashBoard(testB), move])
        return Children

        ---------------

        ---------------

               # For non-captures and non-killers, order by cutoffs if possible
        ogi = i  # Hold original i value
        for k in range(i, len(moves)):
            if not moves[k] in coMoves:
                continue
            moves[i], moves[k] = moves[k], moves[i]
            for j in range(i, ogi, -1):  # Order moves by cutoff value
                if coMoves[moves[j]] > coMoves[moves[j-1]]:
                    moves[j-1], moves[j] = moves[j], moves[j-1]
                else:
                    break
            i += 1
        ogi = i  # Hold original i value
        # Order by previous cutoffs
        for k in range(i, len(moves)):
            if not moves[k] in pcoMoves:
                continue
            moves[i], moves[k] = moves[k], moves[i]
            for j in range(i, ogi, -1):  # Order moves by pcutoff value
                if pcoMoves[moves[j]] > pcoMoves[moves[j-1]]:
                    moves[j-1], moves[j] = moves[j], moves[j-1]
                else:
                    break
            i += 1